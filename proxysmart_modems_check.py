#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import asyncio
import json
import os
import platform
import socket
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import aiohttp
from aiohttp import BasicAuth, ClientTimeout

SHOW_STATUS_PATH = "/apix/show_status_json"
RESET_PATH = "/apix/reset_modem_by_imei"
REBOOT_PATH = "/apix/reboot_modem_by_imei"
USB_RESET_PATH = "/apix/usb_reset_modem_json"


# -------- Helpers --------

def is_ping_dead(ping_stats: Optional[str]) -> bool:
    """
    –ö—Ä–∏—Ç–µ—Ä–∏–π "–º–æ–¥–µ–º –º—ë—Ä—Ç–≤": –≤ ping_stats –µ—Å—Ç—å "100% loss".
    –ü—Ä–∏–º–µ—Ä –∏–∑ –¢–ó: "?ms, 100% loss"
    """
    if not ping_stats:
        return True
    return "100% loss" in ping_stats


def get_hostname() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—ë–∂–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞.
    –ü–æ—Ä—è–¥–æ–∫ —à–∞–≥–æ–≤ –ø–æ–¥–æ–±—Ä–∞–Ω –æ—Ç —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –∫ —Å–∞–º—ã–º ¬´—Ç—è–∂—ë–ª—ã–º¬ª.
    –ï—Å–ª–∏ –≤—Å—ë –Ω–µ—É–¥–∞—á–Ω–æ ‚Äî 'localhost'.
    """

    # 1. socket.gethostname() ‚Äî –ø—Ä—è–º–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤
    try:
        hn = socket.gethostname()
        if hn:
            return hn
    except Exception:
        pass

    # 2. platform.node() ‚Äî –æ–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Ç–æ–≥–æ –∂–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞,
    #    –Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–∞–≤–Ω–æ –∏ –∏–Ω–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–º, –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø–æ–π–º–∞–ª OSError
    try:
        hn = platform.node()
        if hn:
            return hn
    except Exception:
        pass

    # 3. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è HOSTNAME (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    hn = os.environ.get("HOSTNAME")
    if hn:
        return hn

    # 4. Linux/Unix: —á–∏—Ç–∞–µ–º /etc/hostname
    try:
        hn = Path("/etc/hostname").read_text().strip()
        if hn:
            return hn
    except FileNotFoundError:
        pass

    # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å ‚Äî –≤—ã–∑—ã–≤–∞–µ–º —É—Ç–∏–ª–∏—Ç—É hostname
    try:
        hn = subprocess.check_output(["hostname"], text=True).strip()
        if hn:
            return hn
    except Exception:
        pass

    # 6. –°–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
    return "localhost"


def build_base_url(server: str, scheme: str = "http") -> str:
    server = server.strip()
    if server.startswith("http://") or server.startswith("https://"):
        return server.rstrip("/")
    return f"{scheme}://{server}".rstrip("/")


def modem_key(modem: dict) -> Tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (IMEI, DEV) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    imei = modem.get("modem_details", {}).get("IMEI", "") or ""
    dev = modem.get("net_details", {}).get("DEV", "") or ""
    return imei, dev


def pick_ping(modem: dict) -> str:
    return modem.get("net_details", {}).get("ping_stats", "") or ""


def get_battery_percent(modem: dict) -> Optional[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –∫–∞–∫ int (0..100), –ª–∏–±–æ None,
    –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç/–ø—É—Å—Ç–æ–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.
    –î–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å '%' –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏.
    """
    val = modem.get("android", {}).get("battery")
    if val is None:
        return None
    # –ß–∏—Å–ª–æ?
    if isinstance(val, (int, float)):
        try:
            i = int(val)
            return i if 0 <= i <= 100 else None
        except Exception:
            return None
    # –°—Ç—Ä–æ–∫–∞?
    if isinstance(val, str):
        s = val.strip()
        if not s:
            return None
        # —Å—Ä–µ–∑–∞–µ–º –∑–Ω–∞–∫ %
        if s.endswith("%"):
            s = s[:-1].strip()
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞ —Å–ª—É—á–∞–π "80 " –∏–ª–∏ " ~80")
        digits = "".join(ch for ch in s if ch.isdigit())
        if not digits:
            return None
        try:
            i = int(digits)
            return i if 0 <= i <= 100 else None
        except Exception:
            return None
    return None


async def check_battery_levels(
        session: aiohttp.ClientSession,
        modems: List[dict],
        server_name: str,
        tg_token: Optional[str],
        tg_chat: Optional[str],
        threshold: int = 40,
) -> None:
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–º—ã, –∏—â–µ—Ç android.battery, –∏ –µ—Å–ª–∏ –∑–∞—Ä—è–¥ <= threshold,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram. –ü—É—Å—Ç—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç.
    """
    for m in modems:
        imei, dev = modem_key(m)
        if not imei:
            continue
        batt = get_battery_percent(m)
        if batt is None:
            continue  # "–ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å"
        if batt <= threshold:
            prefix = f"[{server_name}] {dev} (IMEI {imei})"
            await tg_send(
                session, tg_token, tg_chat,
                f"üîã {prefix}: –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ {batt}% (‚â§{threshold}%)."
            )


# -------- Telegram --------

async def tg_send(session: aiohttp.ClientSession, bot_token: Optional[str], chat_id: Optional[str], text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω/—á–∞—Ç –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    if not bot_token or not chat_id:
        return
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        async with session.post(url, json=payload) as resp:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–ª–æ, –Ω–æ –ª–æ–≥–∏—á–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è –≤ 200
            if resp.status != 200:
                # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                body = await resp.text()
                print(f"[WARN] Telegram send failed: HTTP {resp.status} {body}")
    except Exception as e:
        print(f"[WARN] Telegram exception: {e}")


# -------- HTTP API --------

async def fetch_status(session: aiohttp.ClientSession, base_url: str) -> List[dict]:
    url = f"{base_url}{SHOW_STATUS_PATH}"
    async with session.get(url) as resp:
        resp.raise_for_status()
        data = await resp.json(content_type=None)
        if isinstance(data, list):
            return data
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É/—Ç–µ–∫—Å—Ç
        if isinstance(data, dict):
            # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å {"data":[...]}
            for k in ("data", "items", "result"):
                if k in data and isinstance(data[k], list):
                    return data[k]
        raise RuntimeError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ show_status_json")


async def action_reset(session: aiohttp.ClientSession, base_url: str, imei: str) -> None:
    url = f"{base_url}{RESET_PATH}?IMEI={imei}"
    async with session.get(url) as resp:
        print("reset –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        resp.raise_for_status()


async def action_reboot(session: aiohttp.ClientSession, base_url: str, imei: str) -> None:
    url = f"{base_url}{REBOOT_PATH}?IMEI={imei}"
    async with session.get(url) as resp:
        print("reboot –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        resp.raise_for_status()


async def action_usb_reset(session: aiohttp.ClientSession, base_url: str, imei: str) -> None:
    # –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è arg, –∞ –Ω–µ IMEI
    url = f"{base_url}{USB_RESET_PATH}?arg={imei}"
    async with session.get(url) as resp:
        print("usb reset –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        resp.raise_for_status()


def index_by_imei(modems: List[dict]) -> Dict[str, dict]:
    result = {}
    for m in modems:
        imei, _ = modem_key(m)
        if imei:
            result[imei] = m
    return result


# -------- Recovery flow per modem (runs concurrently) --------

async def check_modem_alive(session: aiohttp.ClientSession, base_url: str, imei: str) -> bool:
    try:
        modems = await fetch_status(session, base_url)
        by_imei = index_by_imei(modems)
        m = by_imei.get(imei)
        if not m:
            # –ï—Å–ª–∏ –º–æ–¥–µ–º–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
            return False
        return not is_ping_dead(pick_ping(m))
    except Exception as e:
        print(f"[WARN] check_modem_alive error for IMEI {imei}: {e}")
        return False


async def recover_one_modem(
        session: aiohttp.ClientSession,
        base_url: str,
        imei: str,
        dev: str,
        server_name: str,
        wait_seconds: int,
        tg_token: Optional[str],
        tg_chat: Optional[str],
):
    prefix = f"[{server_name}] {dev} (IMEI {imei})"
    try:
        # Step 1: reset
        await tg_send(session, tg_token, tg_chat, f"üõ† {prefix}: –∑–∞–ø—É—Å–∫–∞—é reset")
        await action_reset(session, base_url, imei)
        await asyncio.sleep(wait_seconds)
        if await check_modem_alive(session, base_url, imei):
            await tg_send(session, tg_token, tg_chat, f"‚úÖ {prefix}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ reset")
            return

        # Step 2: reboot
        await tg_send(session, tg_token, tg_chat, f"üîÅ {prefix}: reset –Ω–µ –ø–æ–º–æ–≥, –≤—ã–ø–æ–ª–Ω—è—é reboot")
        await action_reboot(session, base_url, imei)
        await asyncio.sleep(wait_seconds)
        if await check_modem_alive(session, base_url, imei):
            await tg_send(session, tg_token, tg_chat, f"‚úÖ {prefix}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ reboot")
            return

        # Step 3: usb reset
        await tg_send(session, tg_token, tg_chat, f"üß∞ {prefix}: reboot –Ω–µ –ø–æ–º–æ–≥, –≤—ã–ø–æ–ª–Ω—è—é usb_reset")
        await action_usb_reset(session, base_url, imei)
        await asyncio.sleep(wait_seconds)
        if await check_modem_alive(session, base_url, imei):
            await tg_send(session, tg_token, tg_chat, f"‚úÖ {prefix}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ usb_reset")
            return

        # Step 4: give up
        await tg_send(session, tg_token, tg_chat, f"‚ùå {prefix}: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–æ–¥–µ–º–∞")
    except Exception as e:
        await tg_send(session, tg_token, tg_chat, f"‚ùó {prefix}: –æ—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


# -------- Main orchestration --------

async def main_async(args):
    base_url = build_base_url(args.server, scheme=args.scheme)
    server_name = args.server_name or get_hostname()

    timeout = ClientTimeout(total=args.http_timeout)
    auth = None
    if args.user or args.password:
        auth = BasicAuth(login=args.user or "", password=args.password or "")

    connector = aiohttp.TCPConnector(
        ssl=False)  # –≤ —Å–ª—É—á–∞–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∞ https –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å ssl=False
    async with aiohttp.ClientSession(timeout=timeout, auth=auth, connector=connector) as session:
        # 1) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–º–æ–≤
        modems = await fetch_status(session, base_url)

        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ –±–∞—Ç–∞—Ä–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ android.battery)
        await check_battery_levels(
            session=session,
            modems=modems,
            server_name=server_name,
            tg_token=args.tg_token,
            tg_chat=args.tg_chat,
            threshold=args.battery_threshold,
        )

        # 3) –ù–∞—Ö–æ–¥–∏–º "–º—ë—Ä—Ç–≤—ã–µ" –ø–æ ping_stats
        dead = []
        for m in modems:
            imei, dev = modem_key(m)
            if not imei:
                continue
            if is_ping_dead(pick_ping(m)):
                dead.append((imei, dev))

        if not dead:
            print(f"[{server_name}] ‚úÖ –í—Å–µ –º–æ–¥–µ–º—ã –≤ –ø–æ—Ä—è–¥–∫–µ (–Ω–µ—Ç 100% loss).")
            return

        # 4) –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥–µ–º–∞
        start_msg_lines = [f"[{server_name}] –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–º–æ–≤ —Å 100% loss: {len(dead)}"]
        start_msg_lines += [f"‚Äî {dev} (IMEI {imei})" for imei, dev in dead]
        start_msg = "\n".join(start_msg_lines)
        print(start_msg)
        await tg_send(session, args.tg_token, args.tg_chat, start_msg)

        tasks = [
            asyncio.create_task(
                recover_one_modem(
                    session=session,
                    base_url=base_url,
                    imei=imei,
                    dev=dev,
                    server_name=server_name,
                    wait_seconds=args.wait_seconds,
                    tg_token=args.tg_token,
                    tg_chat=args.tg_chat,
                )
            )
            for imei, dev in dead
        ]

        # 4) –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, return_exceptions=True)


def parse_args():
    # –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (ENV) —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
    env_server = os.getenv("MG_SERVER", "localhost:8080")
    env_scheme = os.getenv("MG_SCHEME", "http")
    env_user = os.getenv("MG_USER", "")
    env_password = os.getenv("MG_PASSWORD", "")
    env_server_name = os.getenv("MG_SERVER_NAME", "")
    env_tg_token = os.getenv("MG_TG_TOKEN", "")
    env_tg_chat = os.getenv("MG_TG_CHAT", "-4850356170")

    try:
        env_battery_threshold = int(os.getenv("MG_BATTERY_THRESHOLD", "40"))
    except ValueError:
        env_battery_threshold = 40
    try:
        env_wait_seconds = int(os.getenv("MG_WAIT_SECONDS", "180"))
    except ValueError:
        env_wait_seconds = 180
    try:
        env_http_timeout = int(os.getenv("MG_HTTP_TIMEOUT", "240"))
    except ValueError:
        env_http_timeout = 30

    p = argparse.ArgumentParser(
        description="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–º–æ–≤ –ø–æ ping_stats –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram."
    )
    # –í–ê–ñ–ù–û: server –±–æ–ª—å—à–µ –Ω–µ required=True, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ENV/–¥–µ—Ñ–æ–ª—Ç
    p.add_argument("--battery-threshold", type=int, default=env_battery_threshold,
                   help="–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –±–∞—Ç–∞—Ä–µ–µ, % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40)")
    p.add_argument("--server", default=env_server, help="–•–æ—Å—Ç:–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 66.179.81.210:7001")
    p.add_argument("--scheme", default=env_scheme, choices=["http", "https"], help="–°—Ö–µ–º–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
    p.add_argument("--user", default=env_user, help="HTTP Basic Auth –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: proxy)")
    p.add_argument("--password", default=env_password, help="HTTP Basic Auth –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ebd8b3675ee8)")
    p.add_argument("--server-name", default=env_server_name, help="–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é hostname)")
    p.add_argument("--tg-token", default=env_tg_token, help="Telegram Bot Token")
    p.add_argument("--tg-chat", default=env_tg_chat, help="Telegram chat_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π id)")
    p.add_argument("--wait-seconds", type=int, default=env_wait_seconds,
                   help="–ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, —Å–µ–∫")
    p.add_argument("--http-timeout", type=int, default=env_http_timeout,
                   help="HTTP —Ç–∞–π–º–∞—É—Ç, —Å–µ–∫")
    return p.parse_args()


def main():
    args = parse_args()
    try:
        asyncio.run(main_async(args))
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


if __name__ == "__main__":
    main()
